{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Копия блокнота \"Seminar_02task.ipynb\"","provenance":[{"file_id":"1Yj2k-yi7sG-C7dt07Dr0C9d1vtjE-BZo","timestamp":1598221563093}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.2"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"colab_type":"text","id":"TDqfgGd0bL3C"},"source":["# Семинар 2: Обзор сред. Q-обучение. Апроксимация Q-функции. \n","\n","## 1. Обзор сред\n","\n","* [Classic Control](https://gym.openai.com/envs/#classic_control)\n","* [Box2D](https://gym.openai.com/envs/#box2d)\n","* [Atari](https://gym.openai.com/envs/#atari)\n","* [Gym Retro](https://openai.com/blog/gym-retro/)\n","* [Mujoco](https://gym.openai.com/envs/#mujoco)\n","* [Robotics](https://gym.openai.com/envs/#robotics)\n","* [Universe](https://openai.com/blog/universe/)\n","* [MineRL](https://minerl.io/) \\(использует проект [malmo](https://www.microsoft.com/en-us/research/project/project-malmo/))\n","* [Starcraft II](https://github.com/deepmind/pysc2)\n","* [Biomechanics: Learning to move](https://www.aicrowd.com/challenges/neurips-2019-learning-to-move-walk-around)\n","* [Procgen](https://openai.com/blog/procgen-benchmark/)\n","* [Halitate on Kaggle](https://www.kaggle.com/c/halite) \n","* [Flatland](https://www.aicrowd.com/challenges/neurips-2020-flatland-challenge)\n","* Настольные игры: Chess, GO и т.д. (множество среда на github)\n","* [Learning to Run a Power Network](https://competitions.codalab.org/competitions/20767) \\(ссылка на [NIPS](https://nips.cc/Conferences/2020/CompetitionTrack))\n","* ...\n","\n","## Краткое повторение\n","<img src=\"https://github.com/hse-ds/iad-applied-ds/raw/master/2020/seminars/seminar15/rlIntro.png\" caption=\"Взаимодействия агента со средой\" style=\"width: 300px;\" />\n","\n","Основные составляющие модели RL:\n","* $s_t$ -- состояние среды в момент времени $t$,\n","* $a_t$ -- действие, совершаемое агентом в момент времени $t$,\n","* $r_t$ -- вознаграждение, получаемое агентом при совершении действия $a_t$,\n","* $\\pi$ -- стратегия, отвечает за выбор действия в конкретном состоянии.\n","\n","Марковский процесс принятия решений\n","В простейших моделях RL среда представляется в виде марковского процесса принятия решений (MDP), где функция перехода определяется как $P(s' |s,a)$, что означает вероятность оказаться в состоянии $s'$ при совершении действия $a$ в состоянии $s$. Вознаграждение теперь определяется как $r(s,a,s')$.\n","\n","<img src=\"https://github.com/hse-ds/iad-applied-ds/raw/master/2020/seminars/seminar15/mdp.png\" caption=\"Марковский процесс принятия решений\" style=\"width: 400px;\"/>"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"ajUaHPOJH-3Z"},"source":["## 2. Q-обучение\n"]},{"cell_type":"markdown","metadata":{"id":"fIX-e9zJKk23","colab_type":"text"},"source":["Одним из наиболее популярных алгоритм обучения на основе временных различий является Q-обучение.Уравнение Беллмана для значения Q-функции записывается как:\n","\n","$$Q(s,a)=r(s)+\\gamma\\sum_s'T(s,a,s')\\max_{a'}Q(a',s')$$\n","\n","Уравнение для итерационного обновления значений Q-функции выглядит следующим образом:$$Q(s,a)\\leftarrow Q(s,a)+\\alpha \\big (r(s)+\\gamma\\max_{a'}Q(a',s') - Q(s,a) \\big ).$$\n","\n","Раскроем скобки:\n","$$Q(s,a)\\leftarrow (1 - \\alpha) \\times Q(s,a)+\\alpha \\times \\big (r(s)+\\gamma\\max_{a'}Q(a',s')\\big ).$$\n","\n","Ничего не напоминает?"]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"WJ79cSTLLPb-"},"source":["Для обучения будем использовать среду Taxi-v3. Подробнее про данное окружение можно посмотреть в документации: https://gym.openai.com/envs/Taxi-v3/."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"ud0_kfOGLUwo","colab":{}},"source":["# не забудьте включить GPU в runtime\n","import gym\n","import numpy as np\n","import matplotlib.pyplot as plt\n","import random"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uwqXBprJKk26","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":153},"executionInfo":{"status":"ok","timestamp":1596734708636,"user_tz":-180,"elapsed":2073,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"0894b2d4-73bf-42b2-da9e-aa94d3a23b1a"},"source":["env = gym.make(\"Taxi-v3\")\n","env.render()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["+---------+\n","|R: | : :\u001b[34;1m\u001b[43mG\u001b[0m\u001b[0m|\n","| : | : : |\n","| : : : : |\n","| | : | : |\n","|\u001b[35mY\u001b[0m| : |B: |\n","+---------+\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Phe3a5aTQBsd","colab":{}},"source":["def show_progress(rewards_batch, log, reward_range=None):\n","    \"\"\"\n","    Удобная функция, которая отображает прогресс обучения.\n","    \"\"\"\n","\n","    if reward_range is None:\n","        reward_range = [-990, +10]\n","    mean_reward = np.mean(rewards_batch)\n","    log.append([mean_reward])\n","\n","    clear_output(True)\n","    plt.figure(figsize=[8, 4])\n","    plt.subplot(1, 2, 1)\n","    plt.plot(list(zip(*log))[0], label='Mean rewards')\n","    plt.legend(loc=4)\n","    plt.grid()\n","    plt.grid()\n","    plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"m_Pbvpm4Kk2-","colab_type":"text"},"source":["### Задание 1\n","\n","Создайте таблицу из нулей, используя информацию из окружения о количестве состояний и действий"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"_bddYTsDQmVL","colab":{}},"source":["import random\n","from IPython.display import clear_output\n","\n","# гиперпараметры алгоритма\n","alpha = 0.1\n","gamma = 0.95\n","epsilon = 0.1\n","episodes_number = 10001"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8QjwLO_CKk3B","colab_type":"code","colab":{}},"source":["def initialize_q_table(env):\n","    # подсказка смотрим env.observation_space и env.action_space\n","    # q_table_ = [state][action]\n","    ####### Здесь ваш код ##########\n","    q_table_ = np.zeros([env.observation_space.n, env.adef initialize_q_table(env):\n","    # подсказка смотрим env.observation_space и env.action_space\n","    # q_table_ = [state][action]\n","    ####### Здесь ваш код ##########\n","    q_table_ = np.zeros([env.observation_space.n, env.action_space.n])\n","    ################################\n","    return q_table_ction_space.n])\n","    ################################\n","    return q_table_"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"pG9YEmftQtu0"},"source":["### Задание 2\n","\n","Напишите код для формулы Q-обновления, используя известные: alpha, reward, gamma, next_max, old_value (q_table[state, action])"]},{"cell_type":"code","metadata":{"colab_type":"code","id":"DUthRLiaIuuV","colab":{}},"source":["# определяем память, в которой будет храниться Q(s,a)\n","q_table = initialize_q_table(env)\n","log = []\n","rewards_batch = []\n","\n","for i in range(1, episodes_number):\n","    state = env.reset()\n","\n","    episode, reward, episode_reward = 0, 0, 0\n","    done = False\n","    \n","    while not done:\n","        # выбираем действие, используя eps-greedy исследование среды\n","        # с вероятностью epsilon выбираем случайное действие, иначе \n","        # выполняем действие жадно, согласно текущей Q-таблице \n","        # action = \n","        ####### Здесь ваш код ##########\n","        if random.uniform(0, 1) < epsilon:\n","            action = env.action_space.sample() # исследуем среду\n","        else:\n","            action = np.argmax(q_table[state]) # используем Q-функцию\n","        ################################\n","        \n","        # выполняем действие в среде \n","        next_state, reward, done, info = env.step(action) \n","        \n","        # получаем old_value (Q(s,a)) и next_max (max(Q(s', a')))\n","        old_value = q_table[state, action]\n","        next_max = np.max(q_table[next_state])\n","        \n","        # код для Q-обновления\n","        # new_value = \n","        ####### Здесь ваш код ##########\n","        new_value = (1 - alpha) * old_value + alpha * (reward + gamma * next_max)\n","        ################################\n","        \n","        q_table[state, action] = new_value\n","\n","        state = next_state\n","        episode += 1\n","        episode_reward += reward\n","    rewards_batch.append(episode_reward)\n","     \n","    if i % 100 == 0:\n","        show_progress(rewards_batch, log)\n","        rewards_batch = []\n","        print(f\"Episode: {i}, Reward: {episode_reward}\")"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"QCvfdLORQOf0"},"source":["Если все сделано правильно, то график должен выйти на плато около 0. А значение вознаграждение будет в диапазоне [-5, 10], за счет случайного выбора начальной позиции такси и пассажира. Попробуйте изменить гиперпараметры и сравните результаты."]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"f7sfWBeBq8Wx"},"source":["## 3. Аппроксимация Q-функции\n","\n","В данном пункте мы будем использовать библиотеку tensorflow для обучения нейронной сети, хотя можно использовать и любую другую библиотеку."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"5BFkc4eN16Lh","colab":{}},"source":["import sys, os\n","import gym\n","import random\n","if 'google.colab' in sys.modules:\n","    %tensorflow_version 1.x"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"YRnOxiAZrOFN","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1596736648565,"user_tz":-180,"elapsed":602,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"c1997fbd-4056-425d-cf19-8f86dc98ef19"},"source":["env = gym.make(\"CartPole-v0\")\n","s = env.reset()\n","n_actions = env.action_space.n\n","state_dim = env.observation_space.shape\n","\n","print(state_dim)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(4,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"cYbIV7w42Fp1"},"source":["Так как описание состояния в задаче с маятником представляет собой не \"сырые\" признаки, а уже предобработанные (координаты, углы), нам не нужна для начала сложная архитектура, начнем с такой:\n","<img src=\"https://github.com/hse-ds/iad-applied-ds/raw/master/2020/seminars/seminar15/qapp.png\">\n","Для начала попробуйте использовать только полносвязные слои (L.Dense) и простые активационные функции. Сигмоиды и другие функции не будут работать с ненормализованными входными данными."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"4kjlhlAP4rcf","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1596737975729,"user_tz":-180,"elapsed":7511,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"88b27cb9-6e73-4c52-fb3f-91af51745e8a"},"source":["import tensorflow as tf\n","import keras\n","import keras.layers as L\n","import numpy as np\n","\n","tf.reset_default_graph()\n","sess = tf.InteractiveSession()\n","keras.backend.set_session(sess)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Using TensorFlow backend.\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"yjFU7TXz4sD7","colab":{"base_uri":"https://localhost:8080/","height":88},"executionInfo":{"status":"ok","timestamp":1596737976110,"user_tz":-180,"elapsed":777,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"ec673b95-ffb0-4d28-aa74-ff4a29de92ab"},"source":["network = keras.models.Sequential()\n","network.add(L.InputLayer(state_dim))\n","# определяем граф вычислений, \n","# выходной слой должен быть без функции активации!\n","####### Здесь ваш код ##########\n","network.add(L.Dense(300, activation=\"relu\"))\n","network.add(L.Dense(n_actions))\n","################################"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/tensorflow_core/python/ops/resource_variable_ops.py:1630: calling BaseResourceVariable.__init__ (from tensorflow.python.ops.resource_variable_ops) with constraint is deprecated and will be removed in a future version.\n","Instructions for updating:\n","If using Keras pass *_constraint arguments to layers.\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"PxestEGOY8VR","colab_type":"text"},"source":["Можем попробовать что-то предсказать:"]},{"cell_type":"code","metadata":{"id":"4MKym6ODX_Bk","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":102},"executionInfo":{"status":"ok","timestamp":1596737984878,"user_tz":-180,"elapsed":7530,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"943ad480-d0d8-4050-a990-e4b6b8a51cb9"},"source":["s1 = env.reset()\n","print(\"s1:\", s1)\n","\n","# приводим единственное состояние к формату батча\n","s1 = s1[None] # [[x1, x2, x3, x4]]\n","print(\"s1[None]:\", s1)\n","\n","# предсказываем значение [1]\n","print(\"predict:\", network.predict(s1))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["s1: [ 0.01346599 -0.02807536 -0.01173901  0.02747713]\n","s1[None]: [[ 0.01346599 -0.02807536 -0.01173901  0.02747713]]\n","WARNING:tensorflow:From /tensorflow-1.15.2/python3.6/keras/backend/tensorflow_backend.py:422: The name tf.global_variables is deprecated. Please use tf.compat.v1.global_variables instead.\n","\n","predict: [[-0.00483701  0.00203296]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"rcZhESiN4zuE","colab":{}},"source":["import random\n","def get_action(network_, state, epsilon=0):\n","    \"\"\"\n","    сэмплируем (eps greedy) действие  \n","    \"\"\"\n","    # нужно выбрать действия eps-жадно, как мы делали в табличном Q-обучении\n","    # action = \n","    ####### Здесь ваш код ##########\n","    if epsilon < random.random():\n","      q_values = network_.predict(state[None])[0]\n","      action = np.argmax(q_values)\n","    else:\n","      action = random.choice(range(n_actions))\n","    ################################\n","    \n","    return action"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"LpYxHgz642cZ","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1596738013164,"user_tz":-180,"elapsed":25419,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"28fc7a92-19f5-4e4a-87e0-52488e0a5967"},"source":["assert network.output_shape == (None, n_actions), \"Убедитесь, что стратегия переводит s -> [Q(s,a0), ..., Q(s, a_last)]\"\n","assert network.layers[-1].activation == keras.activations.linear, \"убедитесь, что вы предсказываете q без нелинейности\"\n","\n","# test epsilon-greedy exploration\n","s = env.reset()\n","assert np.shape(get_action(network, s)) == (), \"убедитесь, что возвращается только одно действие (типа integer)\"\n","for eps in [0., 0.1, 0.5, 1.0]:\n","    state_frequencies = np.bincount([get_action(network, s, epsilon=eps) for i in range(10000)], minlength=n_actions)\n","    best_action = state_frequencies.argmax()\n","    assert abs(state_frequencies[best_action] - 10000 * (1 - eps + eps / n_actions)) < 200\n","    for other_action in range(n_actions):\n","        if other_action != best_action:\n","            assert abs(state_frequencies[other_action] - 10000 * (eps / n_actions)) < 200\n","    print('e=%.1f tests passed'%eps)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["e=0.0 tests passed\n","e=0.1 tests passed\n","e=0.5 tests passed\n","e=1.0 tests passed\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"JcAUZG5S5LmN"},"source":["Теперь будем приближать Q-функцию агента, минимизируя TD функцию потерь:\n","$$ L = { 1 \\over N} \\sum_i (Q_{\\theta}(s,a) - \\big [r(s,a) + \\gamma \\cdot max_{a'} Q_{-}(s', a')\\big ]) ^2,$$\n","где\n","* $s, a, r, s'$ состояние, действие, вознаграждение и следующее состояние \n","* $\\gamma$ дисконтирующий множетель.\n","\n","Основная тонкость состоит в использовании $Q_{-}(s',a')$. Эта та же самая функция, что и $Q_{\\theta}$, которая является выходом нейронной сети, но при обучении сети, мы не пропускаем через эти слои градиенты. Для этого используется функция tf.stop_gradient."]},{"cell_type":"code","metadata":{"colab_type":"code","id":"hpZjPiKP51_5","colab":{}},"source":["# Создаем placeholders для <s, a, r, s'>, \n","# не забываем про индикатор окончания эпизода (is_done = True)\n","states_ph = keras.backend.placeholder(dtype='float32', shape=(None,) + state_dim)\n","actions_ph = keras.backend.placeholder(dtype='int32', shape=[None])\n","rewards_ph = keras.backend.placeholder(dtype='float32', shape=[None])\n","next_states_ph = keras.backend.placeholder(dtype='float32', shape=(None,) + state_dim)\n","is_done_ph = keras.backend.placeholder(dtype='bool', shape=[None])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"0MqsHE1w59un","colab":{}},"source":["# получаем q для всех действий, в текущем состоянии\n","predicted_qvalues = network(states_ph)\n","\n","# получаем q-values для выбранного действия\n","predicted_qvalues_for_actions = tf.reduce_sum(predicted_qvalues * tf.one_hot(actions_ph, n_actions), axis=1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"Gw_S5wXc6FUs","colab":{"base_uri":"https://localhost:8080/","height":68},"executionInfo":{"status":"ok","timestamp":1596738058147,"user_tz":-180,"elapsed":632,"user":{"displayName":"Alexey Skrynnik","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gjb-e3rfdb-9cH-pDpsbPoNsHTSCgRXXeyYsgnk=s64","userId":"17884625855310505059"}},"outputId":"8172ab16-469a-4017-f568-fdbb0dc3cc43"},"source":["gamma = 0.99\n","\n","# применяем сеть для получения q-value для next_states_ph\n","# predicted_next_qvalues =\n","####### Здесь ваш код ##########\n","predicted_next_qvalues = network(next_states_ph)\n","################################\n","\n","# вычисляем V*(next_states) \n","# по предсказанным next q-values \n","next_state_values = tf.reduce_max(predicted_next_qvalues, axis=1)\n","\n","# Вычисляем target q-values для функции потерь \n","# target_qvalues_for_actions = \n","####### Здесь ваш код ##########\n","target_qvalues_for_actions = rewards_ph + gamma * next_state_values\n","################################\n","\n","# для последнего значения в эпизоде используем упрощенную формулу Q(s,a) = r(s,a) \n","# if x : smth else \n","target_qvalues_for_actions = tf.where(is_done_ph, rewards_ph, target_qvalues_for_actions)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["WARNING:tensorflow:From <ipython-input-20-2115ce9e9ba3>:21: where (from tensorflow.python.ops.array_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Use tf.where in 2.0, which has the same broadcast rule as np.where\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab_type":"code","id":"xO26mQWF61Rd","colab":{}},"source":["# mean squared error loss, который будем минимизировать\n","loss = (predicted_qvalues_for_actions - tf.stop_gradient(target_qvalues_for_actions)) ** 2\n","loss = tf.reduce_mean(loss)\n","\n","# применяем AdamOptimizer\n","train_step = tf.train.AdamOptimizer(1e-4).minimize(loss)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"VTImrMM77CTg","colab":{}},"source":["assert tf.gradients(loss, [predicted_qvalues_for_actions])[0] is not None, \"убедитесь, что обновление выполняется только для выбранного действия\"\n","assert tf.gradients(loss, [predicted_next_qvalues])[0] is None, \"убедитесь, что вы не распространяете градиент Q_(s',a')\"\n","assert predicted_next_qvalues.shape.ndims == 2, \"убедитесь, что вы предсказываете q для всех действий,следующего состояния\"\n","assert next_state_values.shape.ndims == 1, \"убедитесь, что вы вычислили V(s') как максимум только по оси действий, а не по всем осям\"\n","assert target_qvalues_for_actions.shape.ndims == 1, \"что-то не так с целевыми q-значениями, они должны быть вектором\""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"EqcQCsXb7lAH","colab":{}},"source":["def generate_session(env, t_max=1000, epsilon=0, train=False):\n","    total_reward = 0\n","    s = env.reset()\n","    \n","    for t in range(t_max):\n","        a = get_action(network, s, epsilon=epsilon)       \n","        next_s, r, done, _ = env.step(a)\n","        \n","        replay_buffer-.append((s, next_s, r, done))\n","        if train:\n","            sess.run(train_step,{\n","                states_ph: [s], actions_ph: [a], rewards_ph: [r], \n","                next_states_ph: [next_s], is_done_ph: [done]\n","            })\n","\n","        total_reward += r\n","        s = next_s\n","        if done:\n","            break\n","            \n","    return total_reward"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"5XzMJKbP7s7g","colab":{"base_uri":"https://localhost:8080/","height":282},"outputId":"3e9bd553-f95a-4486-c3d0-62665fda5773"},"source":["sess.run(tf.global_variables_initializer())\n","\n","log = []\n","epsilon = 0.5\n","\n","for i in range(1, 100):\n","    session_rewards = [generate_session(env, epsilon=epsilon, train=True) for _ in range(100)]\n","    \n","    # Постепенно уменьшайте epsilon\n","    # epsilon =\n","    ####### Здесь ваш код ##########\n","    epsilon *= 0.99\n","    ################################\n","    assert epsilon >= 1e-4, \"убедитесь, что epsilon не становится < 0\"\n","    show_progress(session_rewards, log, reward_range=[0, 200])\n","    print(\"epoch #{}\\tmean reward = {:.3f}\\tepsilon = {:.3f}\".format(i, np.mean(session_rewards), epsilon))\n","    if np.mean(session_rewards) > 300:\n","        print(\"Принято!\")\n","        break"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 576x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["epoch #45\tmean reward = 160.220\tepsilon = 0.318\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"colab_type":"text","id":"AM3vch0F9LuN"},"source":["Интерпретация результатов\n","* mean reward - среднее вознаграждение за эпизод. В случае корректной реализации, этот показатель будет низким первые 5 эпох и только затем будет возрастать и сойдется на 30-50 эпохе в зависимости от архитектуры сети. \n","* Если сеть не достигает нужных результатов к концу цикла, попробуйте увеличить число нейронов в скрытом слое или поменяйте $\\epsilon$. \n","* epsilon -- обеспечивает стремление агента исследовать среду. "]}]}